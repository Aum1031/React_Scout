/**
 * unlace
 * Copyright(c) 2017 Thai-Duong Nguyen
 * MIT Licensed
 */

/**
 * JavaScript stringifier.
 * @module unlace
 */

/**
 * Stringify JavaScript expressions while facilitating deep inspection of JavaScript objects.
 * @param {*} data - JavaScript expression to be stringified.
 * @param {string} - mode - String representing medium of screen render. Accepted: 'console' and 'DOM'
 * @return {string} - Stringified JavaScript expression.
 */

function unlace(data, mode = 'string', spaces = '', seen = []) {
  let newline;
  let spacer;
  switch (mode) {
    case 'console':
      newline = '\n';
      spacer = ' ';
      break;
    case 'DOM':
      newline = '<br>';
      spacer = '&nbsp&nbsp';
      break;
    case 'string':
      newline = '';
      spacer = '';
      break;
    default:
      throw new Error("2nd argument must be either 'string', 'console', or 'DOM'");
  }

  switch (data) {
    case null:
      return 'null';
    case undefined:
      return 'undefined';
  }

  switch (typeof data) {
    case 'object':
      if (seen.includes(data)) return '[circular reference]';
      seen = [...seen, data];
      if (Array.isArray(data)) return '[' + newline + data.map(e => unlace(e, mode, spaces + spacer, seen)).join(',' + newline) + newline + spaces + ']';
      return spaces + '{' + newline + Object.keys(data).map(key => spaces + spacer + key + ': ' + unlace(data[key], mode, spaces + spacer, seen)).join(',' + newline) + newline + spaces + '}';
    case 'string':
      return "'" + data + "'";
    default:
      return data.toString();
  }

}

/**
 * Module exports.
 * @public
 */

module.exports = unlace;